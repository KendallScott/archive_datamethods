-------this year metrics-------
DEFINE start_day_idnt = '2017337';
DEFINE end_day_idnt = '2017364';
DEFINE start_wk_idnt = '201749';
DEFINE end_wk_idnt = '201752';
DEFINE mth = 'JAN';

create table all_indivs_24mo_&mth as
select distinct dtl.indiv_id
from ua_pos_trans_dtl dtl
inner join ua_store   str on dtl.loc_key = str.loc_key
where dtl.wk_idnt between (&end_wk_idnt - 200 + 1) and &end_wk_idnt;
      
create table omnichannel_&mth as
select
      (case when stre.indiv_id= ecom.indiv_id then stre.indiv_id else coalesce(stre.indiv_id, ecom.indiv_id) end)                                     as indiv_id,
      (case when stre.indiv_id= ecom.indiv_id then 'omni' when stre.indiv_id >0 then 'store only' when ecom.indiv_id >0 then 'ecom only' end)         as channel
from (select dtl.indiv_id from ua_pos_trans_dtl dtl inner join ua_store str on dtl.loc_key = str.loc_key
      where dtl.wk_idnt between ( &end_wk_idnt - 100 + 1) and &end_wk_idnt and dtl.trans_typ_key in(19,22,33) and str.distt_idnt != '999'
      group by dtl.indiv_id) stre
full outer join (select dtl.indiv_id from ua_pos_trans_dtl dtl inner join ua_store str on dtl.loc_key = str.loc_key
      where dtl.wk_idnt between ( &end_wk_idnt - 100 + 1) and &end_wk_idnt and dtl.trans_typ_key in(19,22,33) and str.distt_idnt = '999'
      group by dtl.indiv_id) ecom on stre.indiv_id = ecom.indiv_id;

create table gm_&mth as
select 
      distinct(indiv_id),
      sum(dtl.extended_sls_amt)  as sales,
      sum(dtl.grs_mrgn_amt) as gm
      from  ua_pos_trans_dtl dtl 
      inner join ua_store str on str.loc_key =dtl.loc_key
      where str.distt_idnt !='999'
      and wk_idnt between (&end_wk_idnt - 100 + 1) and &end_wk_idnt
      group by indiv_id; 

create table rolling12trans_&mth as
select
      distinct(dtl.indiv_id)                                                                                                                          as indiv_id,
      count(distinct dtl.pos_trans_key)                                                                                                               as rolling12_trans,
      sum(dtl.extended_sls_amt)                                                                                                                       as rolling12_sales,
      sum(dtl.qty)                                                                                                                                    as rolling12_units,
      max(gm.sales)                                                                                                                                   as store_sales,
      max(gm.gm)                                                                                                                                      as store_gm,
      omni.channel                                                                                                                                    as channel
from ua_pos_trans_dtl dtl
inner join omnichannel_&mth omni on dtl.indiv_id = omni.indiv_id
left join gm_&mth gm on dtl.indiv_id = gm.indiv_id
where dtl.wk_idnt  between (&end_wk_idnt - 100 + 1)  and &end_wk_idnt 
group by dtl.indiv_id, omni.channel;

--time frame metrics
create table timeframe_&mth as
select
      distinct(dtl.indiv_id)                                                                                                                          as indiv_id,
      count(distinct dtl.pos_trans_key)                                                                                                               as timeframe_trans,
      sum(dtl.extended_sls_amt)                                                                                                                       as timeframe_sales,
      sum(dtl.qty)                                                                                                                                    as timeframe_units,
      max(gm.sales)                                                                                                                                   as store_sales,
      max(gm.gm)                                                                                                                                      as store_gm
from ua_pos_trans_dtl dtl
left join gm_timeframe_&mth gm on dtl.indiv_id = gm.indiv_id
where dtl.wk_idnt  between &start_wk_idnt   and &end_wk_idnt 
group by dtl.indiv_id, gm.sales, gm.gm ;

select count(distinct indiv_id),
sum(timeframe_trans),
sum(timeframe_sales),
sum(timeframe_units),
sum(store_sales),
sum(store_gm)
from timeframe_&mth

--time frame metrics
create table gm_timeframe_&mth as
select 
      distinct(indiv_id),
      sum(dtl.extended_sls_amt)  as sales,
      sum(dtl.grs_mrgn_amt) as gm
      from  ua_pos_trans_dtl dtl 
      inner join ua_store str on str.loc_key =dtl.loc_key
      where str.distt_idnt !='999'
      and wk_idnt between &start_wk_idnt  and &end_wk_idnt
      group by indiv_id; 
     


--last and first shop 
create table last_shop_excl_&mth as
  select indiv_id,
         max(last_shop) as last_shop
         from
       (select
       dtl.indiv_id,
       max(dtl.day_idnt) as last_shop
    from ua_pos_trans_dtl dtl inner join ua_store str on dtl.loc_key = str.loc_key
    where dtl.wk_idnt < &start_wk_idnt and dtl.trans_typ_key in(19,22,33) group by dtl.indiv_id)
    group by indiv_id;

--new and reactivated customers
create table new_cust_&mth as
  select            
  distinct (indiv_id)     
  from timeframe_&mth
  where indiv_id not in (select distinct indiv_id from last_shop_excl_&mth);

create table react_cust_&mth as
    select distinct(indiv_id)
    from timeframe_&mth
    where indiv_id in   (select distinct indiv_id from last_shop_excl_&mth where last_shop <= (&start_day_idnt - 1000));

 create table new_react_cust_&mth as
    select distinct indiv_id
    from new_cust_&mth
    union
    select distinct indiv_id
    from react_cust_&mth;

--define customer groups
create table cust_groups_month_&mth as
    select
       case when new_react.indiv_id is not null           then 'new'
            when rolling.rolling12_trans >= 6             then 'top'
            when rolling.rolling12_trans >= 3             then 'middle'
            when rolling.rolling12_trans >= 1             then 'bottom'
                                                          else 'z.error'
       end                                                as custgroup_month,
       rolling.indiv_id
      from        rolling12trans_&mth rolling
      left join new_react_cust_&mth new_react             on rolling.indiv_id = new_react.indiv_id;



/*
use the below definitions and rerun code above
                                                 ^
                                                 |
                                                 |
                                                 |
*/
-------Last year metrics-------
DEFINE start_day_idnt = '2016337';
DEFINE end_day_idnt = '2016364';
DEFINE start_wk_idnt = '201649';
DEFINE end_wk_idnt = '201652';
DEFINE mth = 'LY_JAN';

/*Email metrics*/
--emailed 
create table em_&mth as
select distinct rf.indiv_id                               as indiv_id,
'emailed'                                                 as emailed
from timeframe_&mth mth
inner join ua_email_contact_history em on mth.indiv_id = em.indiv_id
inner join ua_email_ref rf on em.email_id = rf.email_id     
where em.wk_idnt between (&end_wk_idnt-100 + 1) and &end_wk_idnt
and em.control_cd = 0;

--email open 
create table em_open_&mth as
select distinct rf.indiv_id                                 as indiv_id,
'open'                                                      as opens
from timeframe_&mth mth
inner join ua_email_resolution res on mth.indiv_id = res.indiv_id
inner join ua_email_ref rf on res.email_id = rf.email_id        
where res.wk_idnt between (&end_wk_idnt-100 + 1) and &end_wk_idnt
and res.opened_dt is not null;

/*DM metrics*/
create table dm_&mth as
select distinct b.indiv_id,
'direct mailed' as direct_mail
from ua_direct_mail_contact_history a
inner join ua_individual            b on a.addr_id           = b.addr_id
inner join ua_campaign              c on a.campaign_id       = c.campaign_id
inner join ua_pos_tm_day            d on to_date(c.start_dt) = to_date(d.day_dt)
inner join ua_pos_tm_day            e on to_date(c.end_dt)   = to_date(e.day_dt)
where d.wk_idnt <= &end_wk_idnt and e.wk_idnt >= (&end_wk_idnt -100)
and a.control_cd = 0;

/*MVS/LVS*/
--MVS customers with 50% discount
create table mvs_discount_&mth as 
select distinct indiv_id                                                         
from UA_POS_TRANS_DTL                                                         
where UA_POS_TRANS_DTL.DISC_PCT >=50                                                      
and WK_IDNT between (&end_wk_idnt-100 +1) and &end_wk_idnt;  
    
--MVS customers using heavy coupons                                                         
create table mvs_coupon_&mth as 
select distinct indiv_id 
from UA_POS_COUPON_DTL 
where CPN_UPC_DESC IN ( 'CPN 30% ENTIRE', 'CPN 50% ERPP  D01', '1CPN 50% AORPI','1CPN 50% D01', 'CPN 25% ENTIRE DEPT 45', 'CPN 60% OFF AORPI', 'CPN 40% ENTIRE', '1CPN 55% AORPI', '1CPN 40% ENTIRE','CPN 50% AORPI  DEPT 45', '1CPN 60% AORPI', '1CPN 30% ENTIRE', '1CPN 25% ENTIRE - ND', '1CPN 30% ENTIRE - ND', 'CPN 50% AORPI', 'CPN 50% D01', '30% ENTIRE (ENTIRE, INCLUDING', '1CPN 40% ERPP', '1CPN 50% AORPI DEPT 45', 'CPN 55% AORPI', '1CPN 60% ERPP', '1CPN 60% OFF AORPI') 
and WK_IDNT between (&end_wk_idnt-100 +1) and &end_wk_idnt;         

--lifetime discount amount dimension  
create table mvs_disc_amt_&mth as
select indiv_id,
sum(extended_sls_amt) as sales,
(sum(disc_amt) * -1) as disc_amt
from ua_pos_trans_dtl
where wk_idnt<=&end_wk_idnt
group by indiv_id;
 
create table allcust_avg_disc_&mth as
select indiv_id,
sales,
disc_amt,
(sales+disc_amt) as total_sale
from mvs_disc_amt_&mth;

create table allcust_disc_pct_&mth as
select indiv_id,
(disc_amt/total_sale) as disc_pct_ttl
from allcust_avg_disc_&mth
where total_sale != 0;

create table mvs_all_&mth as
select distinct indiv_id
from (select distinct indiv_id from mvs_discount_&mth)
union (select distinct indiv_id from mvs_coupon_&mth)
union (select distinct indiv_id from allcust_disc_pct_&mth where disc_pct_ttl >= 0.3);

--classify all customers in dataset to MVS or LVS
create table value_segment_&mth as
select distinct a.indiv_id
,(case when b.indiv_id is not null then 'MVS' else 'LVS' end) as value_segment
from rolling12trans_&mth a
left join mvs_all_&mth b on a.indiv_id = b.indiv_id;


--define LY customer groups
DEFINE mthlly = 'dec15';

--LLY customers - Identify customers with prior 12month sales (prior Nov 2015)
create table cust_&mthlly as
select distinct a.indiv_id
from ua_pos_trans_dtl a
where a.day_idnt between (&end_day_idnt - 300 + 1) and (&end_day_idnt - 200)
and a.trans_typ_key in (19,22,33);

create table custgroup_yearly_LY_&mth as
select a.indiv_id,
(case when b.indiv_id is null                                 then 'New/React'
when a.rolling12_trans > 0 and a.rolling12_trans <= 2         then 'Bottom'
when a.rolling12_trans > 2 and a.rolling12_trans <= 5         then 'Middle'
when a.rolling12_trans > 5                                    then 'Top' end) as custgroup
from rolling12trans_LY_&mth a
left join cust_&mthlly b on a.indiv_id=b.indiv_id;

--define TY customer groups
create table custgroup_yearly_&mth as
select a.indiv_id,
(case when b.indiv_id is null                                 then 'New/React'
when a.rolling12_trans > 0 and a.rolling12_trans <= 2         then 'Bottom'
when a.rolling12_trans > 2 and a.rolling12_trans <= 5         then 'Middle'
when a.rolling12_trans > 5                                    then 'Top' end) as custgroup
from rolling12trans_&mth a
left join rolling12trans_LY_&mth b on a.indiv_id=b.indiv_id;

drop table  month_cust_&mth 
create table month_cust_&mth as
select 
coalesce(all_cust.indiv_id , cust_yearly.indiv_id, cust_yearly_LY.indiv_id)                   as indiv_id,
tmframe.timeframe_trans                                                                       as month_trans,
tmframe.timeframe_sales                                                                       as month_sales,
tmframe.timeframe_units                                                                       as month_units,
tmframe.store_sales                                                                           as month_store_sales,
tmframe.store_gm                                                                              as month_store_gm,
tmframe_LY.timeframe_trans                                                                    as ly_month_trans,
tmframe_LY.timeframe_sales                                                                    as ly_month_sales,
tmframe_LY.timeframe_units                                                                    as ly_month_units,
tmframe_LY.store_sales                                                                        as ly_month_store_sales,
tmframe_LY.store_gm                                                                           as ly_month_store_gm,
mth.rolling12_sales                                                                           as sales_12mth,
mth.rolling12_trans                                                                           as trans_12mth,
mth.rolling12_units                                                                           as units_12mth,
mth.store_sales                                                                               as store_sales_12mth,
mth.store_gm                                                                                  as store_gm_12mth,
mth.channel                                                                                   as channel_12mth,
cust.custgroup_month                                                                          as monthly_customer_group,
custly.custgroup_month                                                                        as monthly_customer_group_ly,
cust_yearly.custgroup                                                                         as yearly_customer_group,
cust_yearly_LY.custgroup                                                                      as yearly_customer_group_LY,
mthly.rolling12_sales                                                                         as ly_sales_12mth,
mthly.rolling12_trans                                                                         as ly_trans_12mth,
mthly.rolling12_units                                                                         as ly_units_12mth,
mthly.store_sales                                                                             as ly_store_sales_12mth,
mthly.store_gm                                                                                as ly_store_gm_12mth,
mthly.channel                                                                                 as ly_channel_12mth,
email.emailed                                                                                 as emailed_12mth,
em_open.opens                                                                                 as email_opens_12mth,
dm_LY.direct_mail                                                                             as direct_mail_12mth,
email_LY.emailed                                                                              as emailed_12mth_LY,
em_open_LY.opens                                                                              as email_opens_12mth_LY,
dm_LY.direct_mail                                                                             as direct_mail_12mth_LY,
mvs_lvs.value_segment                                                                         as mvs_lvs,
mvs_lvs_LY.value_segment                                                                      as mvs_lvs_LY
from all_indivs_24mo_&mth                         all_cust 
left join rolling12trans_&mth                     mth                   on all_cust.indiv_id = mth.indiv_id
left join rolling12trans_LY_&mth                  mthly                 on all_cust.indiv_id = mthly.indiv_id
left join cust_groups_month_&mth                  cust                  on all_cust.indiv_id = cust.indiv_id
left join cust_groups_month_LY_&mth               custLY                on all_cust.indiv_id = custLY.indiv_id
left join timeframe_&mth                          tmframe               on all_cust.indiv_id = tmframe.indiv_id
left join timeframe_LY_&mth                       tmframe_LY            on all_cust.indiv_id = tmframe_LY.indiv_id
left join em_&mth                                 email                 on all_cust.indiv_id = email.indiv_id
left join em_open_&mth                            em_open               on all_cust.indiv_id = em_open.indiv_id
left join dm_&mth                                 dm                    on all_cust.indiv_id = dm.indiv_id
left join em_LY_&mth                              email_LY              on all_cust.indiv_id = email_LY.indiv_id
left join em_open_LY_&mth                         em_open_LY            on all_cust.indiv_id = em_open_LY.indiv_id
left join dm_LY_&mth                              dm_LY                 on all_cust.indiv_id = dm_LY.indiv_id
left join value_segment_&mth                      mvs_lvs               on all_cust.indiv_id = mvs_lvs.indiv_id
left join value_segment_LY_&mth                   mvs_lvs_LY            on all_cust.indiv_id = mvs_lvs_LY.indiv_id
full outer join custgroup_yearly_&mth             cust_yearly           on all_cust.indiv_id =  cust_yearly.indiv_id
full outer join custgroup_yearly_LY_&mth          cust_yearly_LY        on all_cust.indiv_id =  cust_yearly_LY.indiv_id;

grant select on month_cust_&mth to public;

select
count(distinct indiv_id) as customers,
sum(month_trans),
sum(month_sales),
sum(month_units),
sum(month_store_sales) as store_sales,
sum(month_store_gm) as gm_sales,
sum(ly_month_trans),
sum(ly_month_sales),
sum(ly_month_units),
sum(ly_month_store_gm) as gm_sales_ly,
sum(ly_month_store_sales) as store_sales_ly,
monthly_customer_group,
monthly_customer_group_ly,
channel_12mth
from month_cust_&mth
group by monthly_customer_group, monthly_customer_group_ly , channel_12mth
