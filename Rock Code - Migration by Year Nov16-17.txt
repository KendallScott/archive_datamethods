-----Start ROCK code-----
--TY (12month)
DEFINE mth= 'nov';
DEFINE start_day_idnt_ty = '2016302'; 
DEFINE end_day_idnt_ty = '2017301';
DEFINE start_wk_idnt_ty = '201644';
DEFINE end_wk_idnt_ty = '201743';
DEFINE mthty = 'nov17';
--LY (12month)
DEFINE start_day_idnt_ly = '2015302';
DEFINE end_day_idnt_ly = '2016301';
DEFINE start_wk_idnt_ly = '201544';
DEFINE end_wk_idnt_ly = '201643';
DEFINE mthly = 'nov16';
DEFINE mthlly = 'nov15';


----------------------------get TY Yearly customers--------------------------------

--rolling12 in-store + online
create table rolling12trans_&mthty as
select
indiv_id
,sum(rolling12) as rolling12trans
,sum(rolling12sales) as rolling12sales
-- ,max(lastshop) as lastshop
from (select
      a.indiv_id
      ,count(distinct a.pos_trans_key) as rolling12
      ,sum(a.extended_sls_amt) as rolling12sales
      -- ,max(a.day_idnt) as lastshop
     from         ua_pos_trans_dtl a
     inner join ua_store b on a.loc_key = b.loc_key
     where a.wk_idnt between ( &end_wk_idnt_ty - 100 + 1) and &end_wk_idnt_ty
      and a.trans_typ_key in (19,22,33)
      and b.distt_idnt != '999'
    group by a.indiv_id
union all
    select
    ecom.indiv_id
    ,count(distinct ecom.order_id) as rolling12
    ,sum(ecom.dmnd_net_ttl_amt) as rolling12sales
    -- ,max(tm.day_idnt) as lastshop
    from ua_ecom_order_dtl   ecom
    inner join ua_pos_tm_day tm on to_date(ecom.dmnd_dt) = (tm.day_dt)
    where tm.day_idnt between  (&end_day_idnt_ty - 1000 + 1) and &end_day_idnt_ty
    group by ecom.indiv_id)
group by indiv_id;

-- --new customers TY  
-- create table new_cust_&mthty as
--     select distinct a.indiv_id
--     from rolling12trans_&mthty a
--     inner join ua_individual_agg b on a.indiv_id = b.indiv_id
--     inner join ua_pos_tm_day     c on to_date(b.first_purchase_dt) = to_date(c.day_dt)
--     where c.day_idnt between &start_day_idnt_ty and &end_day_idnt_ty;

-- --reactivated customers TY
-- create table last_shop_excl_mth_&mthty as
--   select indiv_id
--          ,max(last_shop) as last_shop
--   from
--     (select
--        a.indiv_id
--       ,max(a.day_idnt) as last_shop
--     from         ua_pos_trans_dtl a
--     inner join   ua_store         b on a.loc_key = b.loc_key
--     where a.wk_idnt < &start_wk_idnt_ty
--       and a.trans_typ_key in (19,22,33)
--       and b.distt_idnt != '999'
--     group by a.indiv_id
-- union all
--    select
--        a.indiv_id
--       ,max(b.day_idnt) as last_shop
--     from         ua_ecom_order_dtl  a
--     inner join   ua_pos_tm_day      b on to_date(a.dmnd_dt) = to_date(b.day_dt)
--     where b.wk_idnt < &start_wk_idnt_ty
--     and b.day_idnt < &start_day_idnt_ty
--     group by indiv_id)
-- group by indiv_id;
     
-- create table react_cust_&mthty as
--     select distinct indiv_id
--     from rolling12trans_&mthty
--     where indiv_id in
--     (select distinct indiv_id from last_shop_excl_mth_&mthty where last_shop <= (&end_day_idnt_ty - 1000));

-- --new and reactivated customers TY
--  create table new_react_cust_&mthty as
--     select distinct indiv_id
--     from new_cust_&mthty
--     union
--     select distinct indiv_id
--     from react_cust_&mthty;


----------------------------get LY Yearly customers--------------------------------

--rolling12 in-store + online
create table rolling12trans_&mthly as
select
indiv_id
,sum(rolling12) as rolling12trans
,sum(rolling12sales) as rolling12sales
-- ,max(lastshop) as lastshop
from (select
      a.indiv_id
      ,count(distinct a.pos_trans_key) as rolling12
      ,sum(a.extended_sls_amt) as rolling12sales
      -- ,max(a.day_idnt) as lastshop
     from         ua_pos_trans_dtl a
     inner join ua_store b on a.loc_key = b.loc_key
     where a.wk_idnt between ( &end_wk_idnt_ly - 100 + 1) and &end_wk_idnt_ly
      and a.trans_typ_key in (19,22,33)
      and b.distt_idnt != '999'
    group by a.indiv_id
union all
    select
    ecom.indiv_id
    ,count(distinct ecom.order_id) as rolling12
    ,sum(ecom.dmnd_net_ttl_amt) as rolling12sales
    -- ,max(tm.day_idnt) as lastshop
    from ua_ecom_order_dtl   ecom
    inner join ua_pos_tm_day tm on to_date(ecom.dmnd_dt) = (tm.day_dt)
    where tm.day_idnt between  (&end_day_idnt_ly - 1000 + 1) and &end_day_idnt_ly
    group by ecom.indiv_id)
group by indiv_id;

--define TY customer groups
create table cust_groups_&mthty as
select a.indiv_id,
a.rolling12trans,
a.rolling12sales,
(case when b.indiv_id is null then 'New/React'
when a.rolling12trans > 0 and a.rolling12trans <= 2 then 'Bottom'
when a.rolling12trans > 2 and a.rolling12trans <= 5 then 'Middle'
else 'Top' end) as custgroup
from rolling12trans_&mthty a
left join rolling12trans_&mthly b on a.indiv_id=b.indiv_id;


--define LY customer groups

--LLY customers - Identify customers with prior 12month sales (prior Nov 2015)
create table cust_&mthlly as
select distinct a.indiv_id
from ua_pos_trans_dtl a
where a.day_idnt between 2014302 and 2015301
and a.trans_typ_key in (19,22,33);

create table cust_groups_&mthly as
select a.indiv_id,
a.rolling12trans,
a.rolling12sales,
(case when b.indiv_id is null then 'New/React'
when a.rolling12trans > 0 and a.rolling12trans <= 2 then 'Bottom'
when a.rolling12trans > 2 and a.rolling12trans <= 5 then 'Middle'
else 'Top' end) as custgroup
from rolling12trans_&mthly a
left join cust_&mthlly b on a.indiv_id=b.indiv_id;

-- --new customers LY  
-- create table new_cust_&mthly as
--     select distinct a.indiv_id
--     from rolling12trans_&mthly a
--     inner join ua_individual_agg b on a.indiv_id = b.indiv_id
--     inner join ua_pos_tm_day     c on to_date(b.first_purchase_dt) = to_date(c.day_dt)
--     where c.day_idnt between &start_day_idnt_ly and &end_day_idnt_ly;

-- --reactivated customers LY
-- create table last_shop_excl_mth_&mthly as
--   select indiv_id
--          ,max(last_shop) as last_shop
--   from
--     (select
--        a.indiv_id
--       ,max(a.day_idnt) as last_shop
--     from         ua_pos_trans_dtl a
--     inner join   ua_store         b on a.loc_key = b.loc_key
--     where a.wk_idnt < &start_wk_idnt_ly
--       and a.trans_typ_key in (19,22,33)
--       and b.distt_idnt != '999'
--     group by a.indiv_id
-- union all
--    select
--        a.indiv_id
--       ,max(b.day_idnt) as last_shop
--     from         ua_ecom_order_dtl  a
--     inner join   ua_pos_tm_day      b on to_date(a.dmnd_dt) = to_date(b.day_dt)
--     where b.wk_idnt < &start_wk_idnt_ly
--     and b.day_idnt < &start_day_idnt_ly
--     group by indiv_id)
-- group by indiv_id;
     
-- create table react_cust_&mthly as
--     select distinct indiv_id
--     from rolling12trans_&mthly
--     where indiv_id in
--     (select distinct indiv_id from last_shop_excl_mth_&mthly where last_shop <= (&end_day_idnt_ly - 1000));

-- --new and reactivated customers LY
--  create table new_react_cust_&mthly as
--     select distinct indiv_id
--     from new_cust_&mthly
--     union
--     select distinct indiv_id
--     from react_cust_&mthly;

-- --define customer groups
-- create table cust_groups_&mthly as
--     select
--        case when b.indiv_id is not null then 'New/react'
--             when a.rolling12trans >= 6  then 'Top'
--             when a.rolling12trans >= 3  then 'Middle'
--             when a.rolling12trans >= 1  then 'Bottom'
--                                         else 'z.error'
--        end custgroup
--       ,a.indiv_id
--       -- ,a.lastshop
--     from        rolling12trans_&mthly a
--       left join new_react_cust_&mthly b on a.indiv_id = b.indiv_id;


----------------------
-- drop table rolling12trans_&mthty purge;
-- drop table new_cust_&mthty purge;
-- drop table last_shop_excl_mth_&mthty purge;
-- drop table react_cust_&mthty purge;
-- drop table new_react_cust_&mthty purge;
-- drop table cust_groups_&mthty Purge;

-- drop table rolling12trans_&mthly purge;
-- drop table new_cust_&mthly purge;
-- drop table last_shop_excl_mth_&mthly purge;
-- drop table react_cust_&mthly purge;
-- drop table new_react_cust_&mthly purge;
-- drop table cust_groups_&mthly Purge;


--------------------customer migration code with added dimensions-----------------

----START ROCK------
DEFINE start_wk_idnt = '201644';
DEFINE end_wk_idnt = '201743';
DEFINE start_wk_ly = '201544';
DEFINE end_wk_ly = '201643';
DEFINE mth = 'nov';
DEFINE mthty = 'nov17';
DEFINE mthly = 'nov16';

/*Email metrics*/
--emailed TY
create table em_&mthty as
select distinct b.indiv_id
from ua_email_contact_history a
inner join ua_email_ref       b on a.email_id = b.email_id        
where a.wk_idnt between &start_wk_idnt and &end_wk_idnt
and a.control_cd = 0;

--email open TY
create table em_open_&mthty as
select distinct b.indiv_id
from ua_email_resolution      a
inner join ua_email_ref       b on a.email_id = b.email_id        
where a.wk_idnt between &start_wk_idnt and &end_wk_idnt
and a.opened_dt is not null;

--emailed LY
create table em_&mthly as
select distinct b.indiv_id
from ua_email_contact_history a
inner join ua_email_ref       b on a.email_id = b.email_id        
where a.wk_idnt between &start_wk_ly and &end_wk_ly
and a.control_cd = 0;

--email open LY
create table em_open_&mthly as
select distinct b.indiv_id
from ua_email_resolution      a
inner join ua_email_ref       b on a.email_id = b.email_id        
where a.wk_idnt between &start_wk_ly and &end_wk_ly
and a.opened_dt is not null;


/*DM metrics*/
--TY
create table dm_&mthty as
select distinct b.indiv_id
from ua_direct_mail_contact_history a
inner join ua_individual            b on a.addr_id           = b.addr_id
inner join ua_campaign              c on a.campaign_id       = c.campaign_id
inner join ua_pos_tm_day            d on to_date(c.start_dt) = to_date(d.day_dt)
inner join ua_pos_tm_day            e on to_date(c.end_dt)   = to_date(e.day_dt)
where d.wk_idnt <= &end_wk_idnt
and   e.wk_idnt >= &start_wk_idnt
and a.control_cd = 0;

--LY
create table dm_&mthly as
select distinct b.indiv_id
from ua_direct_mail_contact_history a
inner join ua_individual            b on a.addr_id           = b.addr_id
inner join ua_campaign              c on a.campaign_id       = c.campaign_id
inner join ua_pos_tm_day            d on to_date(c.start_dt) = to_date(d.day_dt)
inner join ua_pos_tm_day            e on to_date(c.end_dt)   = to_date(e.day_dt)
where d.wk_idnt <= &end_wk_ly
and   e.wk_idnt >= &start_wk_ly
and a.control_cd = 0;


/*Omnichannel flag (Online only, Instore only, Multi)*/
--TY
create table channel_&mthty as
select d.indiv_id
, case when (d.instore_flg=0 and d.online_flg=1) then 'Online only'
	   when (d.instore_flg=1 and d.online_flg=0) then 'Instore only'
	   when (d.instore_flg=1 and d.online_flg=1) then 'Multi' 
	   else 'z.error' end as channel_ty
FROM
(
select a.indiv_id
,(case when b.indiv_id is null then 0 else 1 end) as instore_flg
,(case when c.indiv_id is null then 0 else 1 end) as online_flg
from rolling12trans_&mthty a
left join (select distinct a.indiv_id
		   from ua_pos_trans_dtl a
     	   inner join ua_store b on a.loc_key = b.loc_key
     	   where a.wk_idnt between &start_wk_idnt and &end_wk_idnt
           and a.trans_typ_key in (19,22,33)
           and b.distt_idnt != '999'
          ) b 
	ON a.indiv_id = b.indiv_id
left join (select distinct ecom.indiv_id
		   from ua_ecom_order_dtl   ecom
     	   inner join ua_pos_tm_day tm on to_date(ecom.dmnd_dt) = (tm.day_dt)
     	   where tm.wk_idnt between &start_wk_idnt and &end_wk_idnt
          ) c
	ON a.indiv_id = c.indiv_id
) d;

--LY
create table channel_&mthly as
select d.indiv_id
, case when (d.instore_flg=0 and d.online_flg=1) then 'Online only'
	   when (d.instore_flg=1 and d.online_flg=0) then 'Instore only'
	   when (d.instore_flg=1 and d.online_flg=1) then 'Multi' 
	   else 'z.error' end as channel_ly
FROM
(
select a.indiv_id
,(case when b.indiv_id is null then 0 else 1 end) as instore_flg
,(case when c.indiv_id is null then 0 else 1 end) as online_flg
from rolling12trans_&mthly a
left join (select distinct a.indiv_id
		   from ua_pos_trans_dtl a
     	   inner join ua_store b on a.loc_key = b.loc_key
     	   where a.wk_idnt between &start_wk_ly and &end_wk_ly
           and a.trans_typ_key in (19,22,33)
           and b.distt_idnt != '999'
          ) b 
	ON a.indiv_id = b.indiv_id
left join (select distinct ecom.indiv_id
		   from ua_ecom_order_dtl   ecom
     	   inner join ua_pos_tm_day tm on to_date(ecom.dmnd_dt) = (tm.day_dt)
     	   where tm.wk_idnt between &start_wk_ly and &end_wk_ly
          ) c
	ON a.indiv_id = c.indiv_id
) d;


/*MVS/LVS*/
--TY
--MVS customers with 50% discount
create table mvs_discount_&mthty as 
select distinct indiv_id                                                         
from UA_POS_TRANS_DTL                                                         
where UA_POS_TRANS_DTL.DISC_PCT >=50                                                      
and WK_IDNT between &start_wk_idnt and &end_wk_idnt;
    
--MVS customers using heavy coupons                                                         
create table mvs_coupon_&mthty as 
select distinct indiv_id 
from UA_POS_COUPON_DTL 
where CPN_UPC_DESC IN  (                                                              
    'CPN 30% ENTIRE',                                                       
    'CPN 50% ERPP  D01',                                                  
    '1CPN 50% AORPI',                                                      
    '1CPN 50% D01',                                                            
    'CPN 25% ENTIRE DEPT 45',                                                      
    'CPN 60% OFF AORPI',                                                                
    'CPN 40% ENTIRE',                                                       
    '1CPN 55% AORPI',                                                      
    '1CPN 40% ENTIRE',                                                     
    'CPN 50% AORPI  DEPT 45',                                                       
    '1CPN 60% AORPI',                                                      
    '1CPN 30% ENTIRE',                                                     
    '1CPN 25% ENTIRE - ND',                                                           
    '1CPN 30% ENTIRE - ND',                                                           
   'CPN 50% AORPI',                                                         
    'CPN 50% D01',                                                              
    '30% ENTIRE (ENTIRE, INCLUDING',                                                      
    '1CPN 40% ERPP',                                                         
    '1CPN 50% AORPI DEPT 45',                                                     
    'CPN 55% AORPI',                                                         
    '1CPN 60% ERPP',                                                         
    '1CPN 60% OFF AORPI'                                                               
  ) 
and WK_IDNT between &start_wk_idnt and &end_wk_idnt;        

--lifetime discount amount dimension  
create table mvs_disc_amt_&mthty as
select indiv_id,
sum(extended_sls_amt) as sales,
(sum(disc_amt) * -1) as disc_amt
from ua_pos_trans_dtl
where wk_idnt<=&end_wk_idnt
group by indiv_id;
 
create table allcust_avg_disc_&mthty as
select indiv_id,
sales,
disc_amt,
(sales+disc_amt) as total_sale
from mvs_disc_amt_&mthty;

create table allcust_disc_pct_&mthty as
select indiv_id,
(disc_amt/total_sale) as disc_pct_ttl
from allcust_avg_disc_&mthty
where total_sale != 0;

create table mvs_all_&mthty as
select distinct indiv_id
from 
(select distinct indiv_id from mvs_discount_&mthty)
union
(select distinct indiv_id from mvs_coupon_&mthty)
union
(select distinct indiv_id from allcust_disc_pct_&mthty where disc_pct_ttl >= 0.3);

--classify all customers in TY dataset to MVS or LVS
create table value_segment_&mthty as
select distinct a.indiv_id
,(case when b.indiv_id is not null then 'MVS' else 'LVS' end) as value_segment_ty
from rolling12trans_&mthty a
left join mvs_all_&mthty b on a.indiv_id = b.indiv_id;

--LY
--MVS customers with 50% discount
create table mvs_discount_&mthly as 
select distinct indiv_id                                                         
from UA_POS_TRANS_DTL                                                         
where UA_POS_TRANS_DTL.DISC_PCT >=50                                                      
and WK_IDNT between &start_wk_ly and &end_wk_ly;
    
--MVS customers using heavy coupons                                                         
create table mvs_coupon_&mthly as 
select distinct indiv_id 
from UA_POS_COUPON_DTL 
where CPN_UPC_DESC IN  (                                                              
    'CPN 30% ENTIRE',                                                       
    'CPN 50% ERPP  D01',                                                  
    '1CPN 50% AORPI',                                                      
    '1CPN 50% D01',                                                            
    'CPN 25% ENTIRE DEPT 45',                                                      
    'CPN 60% OFF AORPI',                                                                
    'CPN 40% ENTIRE',                                                       
    '1CPN 55% AORPI',                                                      
    '1CPN 40% ENTIRE',                                                     
    'CPN 50% AORPI  DEPT 45',                                                       
    '1CPN 60% AORPI',                                                      
    '1CPN 30% ENTIRE',                                                     
    '1CPN 25% ENTIRE - ND',                                                           
    '1CPN 30% ENTIRE - ND',                                                           
   'CPN 50% AORPI',                                                         
    'CPN 50% D01',                                                              
    '30% ENTIRE (ENTIRE, INCLUDING',                                                      
    '1CPN 40% ERPP',                                                         
    '1CPN 50% AORPI DEPT 45',                                                     
    'CPN 55% AORPI',                                                         
    '1CPN 60% ERPP',                                                         
    '1CPN 60% OFF AORPI'                                                               
  ) 
and WK_IDNT between &start_wk_ly and &end_wk_ly;        

--lifetime discount amount dimension  
create table mvs_disc_amt_&mthly as
select indiv_id,
sum(extended_sls_amt) as sales,
(sum(disc_amt) * -1) as disc_amt
from ua_pos_trans_dtl
where wk_idnt<=&end_wk_ly
group by indiv_id;
 
create table allcust_avg_disc_&mthly as
select indiv_id,
sales,
disc_amt,
(sales+disc_amt) as total_sale
from mvs_disc_amt_&mthly;

create table allcust_disc_pct_&mthly as
select indiv_id,
(disc_amt/total_sale) as disc_pct_ttl
from allcust_avg_disc_&mthly
where total_sale != 0;

create table mvs_all_&mthly as
select distinct indiv_id
from 
(select distinct indiv_id from mvs_discount_&mthly)
union
(select distinct indiv_id from mvs_coupon_&mthly)
union
(select distinct indiv_id from allcust_disc_pct_&mthly where disc_pct_ttl >= 0.3);

--classify all customers in TY dataset to MVS or LVS
create table value_segment_&mthly as
select distinct a.indiv_id
,(case when b.indiv_id is not null then 'MVS' else 'LVS' end) as value_segment_ly
from rolling12trans_&mthly a
left join mvs_all_&mthly b on a.indiv_id = b.indiv_id;

-- drop table mvs_discount purge;
-- drop table mvs_coupon purge;
-- drop table mvs_disc_amt purge;
-- drop table allcust_avg_disc purge;
-- drop table allcust_disc_pct purge;
-- drop table mvs_all purge;


/*Extract Sales metrics*/
--get TY sales per customer
create table TY_metrics_&mthty as
select indiv_id
,sum(sales) as sales
,sum(trxn) as trxn
from 
(
select indiv_id
,sum(a.extended_sls_amt) as sales
,count(distinct a.pos_trans_key) as trxn
-- ,sum(grs_mrgn_amt) as gm
from ua_pos_trans_dtl a
inner join ua_store   b on a.loc_key = b.loc_key
where wk_idnt between &start_wk_idnt and &end_wk_idnt
and distt_idnt != '999'
group by indiv_id
union all
select indiv_id
,sum(a.dmnd_net_ttl_amt) as sales
,count(distinct a.order_id) as trxn
-- (sum(dmnd_net_ttl_amt)*&ecom_mrgn_ty) as gm
from ua_ecom_order_dtl   a
inner join ua_pos_tm_day b on to_date(a.dmnd_dt) = to_date(b.day_dt)
where b.wk_idnt between &start_wk_idnt and &end_wk_idnt
group by indiv_id
)
group by indiv_id;

--get LY sales per customer
create table LY_metrics_&mthly as
select indiv_id
,sum(sales) as sales
,sum(trxn) as trxn
from 
(
select indiv_id
,sum(extended_sls_amt) as sales
,count(distinct a.pos_trans_key) as trxn
-- ,sum(grs_mrgn_amt) as gm
from ua_pos_trans_dtl a
inner join ua_store   b on a.loc_key = b.loc_key
where wk_idnt between &start_wk_ly and &end_wk_ly
and distt_idnt != '999'
group by indiv_id
union all
select indiv_id
,sum(a.dmnd_net_ttl_amt) as sales
,count(distinct a.order_id) as trxn
-- (sum(dmnd_net_ttl_amt)*&ecom_mrgn_ty) as gm
from ua_ecom_order_dtl   a
inner join ua_pos_tm_day b on to_date(a.dmnd_dt) = to_date(b.day_dt)
where b.wk_idnt between &start_wk_ly and &end_wk_ly
group by indiv_id
)
group by indiv_id;


/*Combine all metrics*/
--TY
create table TY_groups_&mthty as
select a.indiv_id,
a.custgroup,
(case when c.indiv_id is null then 'N' else 'Y' end) as emailed_ty,
(case when d.indiv_id is null then 'N' else 'Y' end) as email_open_ty,
(case when e.indiv_id is null then 'N' else 'Y' end) as dm_ty,
b.sales,
b.trxn,
f.channel_ty,
g.value_segment_ty
from cust_groups_&mthty   a
inner join TY_metrics_&mthty     b on a.indiv_id = b.indiv_id
left join em_&mthty      c on a.indiv_id = c.indiv_id
left join em_open_&mthty d on a.indiv_id = d.indiv_id
left join dm_&mthty      e on a.indiv_id = e.indiv_id
left join channel_&mthty f on a.indiv_id = f.indiv_id
left join value_segment_&mthty g on a.indiv_id = g.indiv_id;

--LY
create table LY_groups_&mthly as
select a.indiv_id,
a.custgroup,
(case when c.indiv_id is null then 'N' else 'Y' end) as emailed_ly,
(case when d.indiv_id is null then 'N' else 'Y' end) as email_open_ly,
(case when e.indiv_id is null then 'N' else 'Y' end) as dm_ly,
b.sales,
b.trxn,
f.channel_ly,
g.value_segment_ly
from cust_groups_&mthly   a
inner join LY_metrics_&mthly     b on a.indiv_id = b.indiv_id
left join em_&mthly      c on a.indiv_id = c.indiv_id
left join em_open_&mthly d on a.indiv_id = d.indiv_id
left join dm_&mthly      e on a.indiv_id = e.indiv_id
left join channel_&mthly f on a.indiv_id = f.indiv_id
left join value_segment_&mthly g on a.indiv_id = g.indiv_id;

create table allcust_yoy_&mth as
select distinct indiv_id
from
(select distinct indiv_id from LY_groups_&mthly
union
select distinct indiv_id from TY_groups_&mthty);

create table allmetrics_yoy_&mth as
select a.indiv_id,
(case when b.indiv_id is null then 'Lapsed' else b.custgroup end) as segment_ty,
(case when c.indiv_id is null then 'No LY Sales' else c.custgroup end) as segment_ly,
(case when d.indiv_id is null then 'N' else 'Y' end) as emailed_ty,
(case when g.indiv_id is null then 'N' else 'Y' end) as emailed_ly,
(case when e.indiv_id is null then 'N' else 'Y' end) as email_open_ty,
(case when h.indiv_id is null then 'N' else 'Y' end) as email_open_ly,
(case when f.indiv_id is null then 'N' else 'Y' end) as dm_ty,
(case when i.indiv_id is null then 'N' else 'Y' end) as dm_ly,
(case when b.sales is null then 0 else b.sales end) as sales_ty,
(case when c.sales is null then 0 else c.sales end) as sales_ly,
(case when b.trxn is null then 0 else b.trxn end) as trxn_ty,
(case when c.trxn is null then 0 else c.trxn end) as trxn_ly,
(case when b.channel_ty is null then 'N/A' else b.channel_ty end) as channel_ty,
(case when c.channel_ly is null then 'N/A' else c.channel_ly end) as channel_ly,
(case when b.value_segment_ty is null then 'N/A' else b.value_segment_ty end) as value_segment_ty,
(case when c.value_segment_ly is null then 'N/A' else c.value_segment_ly end) as value_segment_ly
from allcust_yoy_&mth          a
left join TY_groups_&mthty       b on a.indiv_id = b.indiv_id
left join LY_groups_&mthly       c on a.indiv_id = c.indiv_id
left join em_&mthty      d on a.indiv_id = d.indiv_id
left join em_open_&mthty e on a.indiv_id = e.indiv_id
left join dm_&mthty      f on a.indiv_id = f.indiv_id
left join em_&mthly      g on a.indiv_id = g.indiv_id
left join em_open_&mthly h on a.indiv_id = h.indiv_id
left join dm_&mthly      i on a.indiv_id = i.indiv_id;

--Final datacut
select segment_ty,
segment_ly,
emailed_ty,
email_open_ty,
dm_ty,
channel_ty,
value_segment_ty,
count(distinct indiv_id) as customers,
sum(sales_ty) as sales_ty,
sum(sales_ly) as sales_ly
,sum(trxn_ty) as trxn_ty
,sum(trxn_ly) as trxn_ly
from allmetrics_yoy_&mth
group by segment_ty, segment_ly, emailed_ty, email_open_ty, dm_ty, channel_ty, value_segment_ty
order by segment_ty, segment_ly, emailed_ty, email_open_ty, dm_ty, channel_ty, value_segment_ty;


/*Segment New/React customers into First purchase + subsequent purchases to get a handle on their behavior*/
--New initial + New repeat

--TY
--Table for customers' first transaction
Create table first_trxn_&mthty as
Select a.indiv_id, a.first_sales, a.first_trxn
FROM
(
select indiv_id
,day_idnt as first_shop
,sum(sales) as first_sales
,sum(trxn) as first_trxn
from 
  (
    select indiv_id
    ,a.day_idnt
    ,sum(a.extended_sls_amt) as sales
    ,count(distinct a.pos_trans_key) as trxn
    from ua_pos_trans_dtl a
    inner join ua_store   b on a.loc_key = b.loc_key
    where wk_idnt between &start_wk_idnt_ty and &end_wk_idnt_ty
    and a.trans_typ_key in (19,22,33)
    and distt_idnt != '999'
    group by a.indiv_id,a.day_idnt
    union all
    select indiv_id
    ,b.day_idnt
    ,sum(a.dmnd_net_ttl_amt) as sales
    ,count(distinct a.order_id) as trxn
    from ua_ecom_order_dtl   a
    inner join ua_pos_tm_day b on to_date(a.dmnd_dt) = to_date(b.day_dt)
    where b.wk_idnt between &start_wk_idnt_ty and &end_wk_idnt_ty
    group by a.indiv_id,b.day_idnt
  )
group by indiv_id,day_idnt
) a
INNER JOIN
    (
      select a.indiv_id,min(a.first_shop) as first_shop
      from
      (
        select indiv_id,min(a.day_idnt) as first_shop
        from ua_pos_trans_dtl a
        inner join ua_store   b on a.loc_key = b.loc_key
        where wk_idnt between &start_wk_idnt_ty and &end_wk_idnt_ty
        and a.trans_typ_key in (19,22,33)
        and distt_idnt != '999'
        group by indiv_id
        union all
        select indiv_id,min(b.day_idnt) as first_shop
        from ua_ecom_order_dtl   a
        inner join ua_pos_tm_day b on to_date(a.dmnd_dt) = to_date(b.day_dt)
        where b.wk_idnt between &start_wk_idnt_ty and &end_wk_idnt_ty
        group by indiv_id
      )a
      group by a.indiv_id
    ) b
ON a.indiv_id=b.indiv_id and a.first_shop=b.first_shop
;

--Table having first & overall trxns
Create table first_rest_trxn_&mthty as
select a.*,rolling12sales-first_sales as rest_sales, rolling12trans-first_trxn as rest_trxn
FROM
(
Select a.*, b.first_sales, b.first_trxn
FROM cust_groups_&mthty a
left join first_trxn_&mthty b
  ON a.indiv_id=b.indiv_id
) a;

-- Select Custgroup, Count(*) From First_Rest_Trxn_&mthty
-- where rest_sales=0
-- group by Custgroup

--Required datacuts
Select Custgroup, Count(*), sum(rolling12sales) as rolling12sales, sum(rolling12trans) as rolling12trans
From First_Rest_Trxn_&mthty
group by Custgroup;

Select Custgroup, Count(*), sum(first_sales) as first_sales, sum(first_trxn) as first_trxn
From First_Rest_Trxn_&mthty
Where  first_trxn <>0
group by Custgroup

Select Custgroup, Count(*), sum(rest_sales) as rest_sales, sum(rest_trxn) as rest_trxn
From First_Rest_Trxn_&mthty
Where  rest_trxn <>0
group by Custgroup


--LY
--Table for customers' first transaction
Create table first_trxn_&mthly as
Select a.indiv_id, a.first_sales, a.first_trxn
FROM
(
select indiv_id
,day_idnt as first_shop
,sum(sales) as first_sales
,sum(trxn) as first_trxn
from 
  (
    select indiv_id
    ,a.day_idnt
    ,sum(a.extended_sls_amt) as sales
    ,count(distinct a.pos_trans_key) as trxn
    from ua_pos_trans_dtl a
    inner join ua_store   b on a.loc_key = b.loc_key
    where wk_idnt between &start_wk_idnt_ly and &end_wk_idnt_ly
    and a.trans_typ_key in (19,22,33)
    and distt_idnt != '999'
    group by a.indiv_id,a.day_idnt
    union all
    select indiv_id
    ,b.day_idnt
    ,sum(a.dmnd_net_ttl_amt) as sales
    ,count(distinct a.order_id) as trxn
    from ua_ecom_order_dtl   a
    inner join ua_pos_tm_day b on to_date(a.dmnd_dt) = to_date(b.day_dt)
    where b.wk_idnt between &start_wk_idnt_ly and &end_wk_idnt_ly
    group by a.indiv_id,b.day_idnt
  )
group by indiv_id,day_idnt
) a
INNER JOIN
    (
      select a.indiv_id,min(a.first_shop) as first_shop
      from
      (
        select indiv_id,min(a.day_idnt) as first_shop
        from ua_pos_trans_dtl a
        inner join ua_store   b on a.loc_key = b.loc_key
        where wk_idnt between &start_wk_idnt_ly and &end_wk_idnt_ly
        and a.trans_typ_key in (19,22,33)
        and distt_idnt != '999'
        group by indiv_id
        union all
        select indiv_id,min(b.day_idnt) as first_shop
        from ua_ecom_order_dtl   a
        inner join ua_pos_tm_day b on to_date(a.dmnd_dt) = to_date(b.day_dt)
        where b.wk_idnt between &start_wk_idnt_ly and &end_wk_idnt_ly
        group by indiv_id
      )a
      group by a.indiv_id
    ) b
ON a.indiv_id=b.indiv_id and a.first_shop=b.first_shop
;

--Table having first & overall trxns
Create table first_rest_trxn_&mthly as
select a.*,rolling12sales-first_sales as rest_sales, rolling12trans-first_trxn as rest_trxn
FROM
(
Select a.*, b.first_sales, b.first_trxn
FROM cust_groups_&mthly a
left join first_trxn_&mthly b
  ON a.indiv_id=b.indiv_id
) a;

-- Select Custgroup, Count(*) From First_Rest_Trxn_&mthly
-- where Rest_trxn=0
-- group by Custgroup

--Required datacuts
Select Custgroup, Count(*), sum(rolling12sales) as rolling12sales, sum(rolling12trans) as rolling12trans
From First_Rest_Trxn_&mthly
group by Custgroup;

Select Custgroup, Count(*), sum(first_sales) as first_sales, sum(first_trxn) as first_trxn
From First_Rest_Trxn_&mthly
Where  first_trxn <>0
group by Custgroup

Select Custgroup, Count(*), sum(rest_sales) as rest_sales, sum(rest_trxn) as rest_trxn
From First_Rest_Trxn_&mthly
Where  rest_trxn <>0
group by Custgroup


-- Select * From First_Rest_Trxn_&mthty
-- Where Rest_Trxn=0 And Rest_Sales=0 And Custgroup='Top' And Rownum<100
-- --rest trxn<>0 and sales=0
-- 1000053193946
-- 1000213246887
-- --rest trxn=0 and sales=0
-- 1000246250238
-- 1000257365168
 
-- Select * From Cust_Groups_&mthty 
-- -- First_Trxn_&mthty 
-- Where Indiv_Id In (1000246250238,1000257365168);
-- 1000213246887 5.39  1
-- 1000053193946 11.66 2

-- 1000257365168 68.96 6
-- 1000246250238 27.1  7

-- 1000053193946 6 11.66 Top
-- 1000213246887 7 5.39  Top

-- 1000246250238 7 27.1  Top
-- 1000257365168 6 68.96 Top

--     select a.*
--     from ua_pos_trans_dtl a
--     inner join ua_store   b on a.loc_key = b.loc_key
--     where wk_idnt between &start_wk_idnt_ty and &end_wk_idnt_ty
--     and a.trans_typ_key in (19,22,33)
--     And Distt_Idnt != '999'
--     and indiv_id in (1000246250238)
--     group by a.indiv_id



/******************************* NTZ Match rate ************************************/

create temp table custAcx as
select distinct indiv_id, pos_trans_key
from acx_tlog_xref_dm a
where a.day_idnt >=2015302;

--TY customers, rolling 12 trxn
create temp table custTYrolling12 as
select a.indiv_id,
count(distinct a.pos_trans_key) as custTYtrans,
sum(b.extended_sls_amt) as custTYsls,
sum(b.grs_mrgn_amt) as custTYgm
from custAcx a
inner join (select distinct indiv_id from acx_tlog_xref_dm where day_idnt between 2016302 and 2017301) c on a.indiv_id = c.indiv_id
left join pos_mrchnds_dtl   b on a.pos_trans_key = b.pos_trans_key
where b.day_idnt between 2016302 and 2017301
group by 1;


--LY customers, prev 12mo sales/trxn
create temp table custLYrolling12 as
select a.indiv_id,
count(distinct a.pos_trans_key) as custLYtrans,
sum(b.extended_sls_amt) as custLYsls,
sum(b.grs_mrgn_amt) as custLYgm
from custAcx a
inner join (select distinct indiv_id from acx_tlog_xref_dm where day_idnt between 2015302 and 2016301) c on a.indiv_id = c.indiv_id
left join pos_mrchnds_dtl b on a.pos_trans_key = b.pos_trans_key
where b.day_idnt between 2015302 and 2016301
group by 1;

-- Total ID sales for TY & LY
select sum(custTYsls) as ID_sls_TY from custTYrolling12;
select sum(custLYsls) as ID_sls_LY from custLYrolling12;

--Overall sales for TY & LY (ID + Non-ID)
select sum(b.extended_sls_amt) as total_sales_TY
from  pos_mrchnds_dtl   b
where b.trans_type_key in (19,22,33) and
b.day_idnt between 2016302 and 2017301;

select sum(b.extended_sls_amt) as total_sales_LY
from  pos_mrchnds_dtl   b
where b.trans_type_key in (19,22,33) and
b.day_idnt between 2015302 and 2016301;


------------------------------------------------------------------------------------------------------------------------------
--Acxiom data completeness check 01/02/2018
--Total (with pos_mrchnds_dtl)
select
count(distinct b.pos_trans_key) as alltrans_dec
,sum(b.extended_sls_amt) as allsales_dec
from  pos_mrchnds_dtl   b
where b.trans_type_key in (19,22,33) and
b.day_idnt between 2017302 and 2017336;

--ID
select
count(distinct b.pos_trans_key) as IDtrans_dec
,sum(b.extended_sls_amt) as IDsales_dec
from acx_tlog_xref_dm a
inner join pos_mrchnds_dtl b
      ON a.pos_trans_key = b.pos_trans_key
where b.trans_type_key in (19,22,33) and
b.day_idnt between 2017302 and 2017336;


--Total (with pos_trans_dtl)
select
count(distinct b.pos_trans_key) as alltrans_dec
,SUM(b.trans_total_amt -nvl (b.trans_tax_amt, 0)) as allsales_dec
from  pos_trans_dtl   b
where b.trans_type_key in (19,22,33) and
b.day_idnt between 2017302 and 2017336;

--ID
select
count(distinct b.pos_trans_key) as IDtrans_dec
,SUM(b.trans_total_amt -nvl (b.trans_tax_amt, 0)) as IDsales_dec
from acx_tlog_xref_dm a
inner join pos_trans_dtl b
      ON a.pos_trans_key = b.pos_trans_key
where b.trans_type_key in (19,22,33) and
b.day_idnt between 2017302 and 2017336;


--Product group breakdown
--Total (with pos_mrchnds_dtl)
select c.grp_desc
,count(distinct b.pos_trans_key) as alltrans_dec
,sum(b.extended_sls_amt) as allsales_dec
from  pos_mrchnds_dtl   b
inner join prod_sku_dm     c on c.sku_key = b.sku_key
where b.trans_type_key in (19,22,33) and
b.day_idnt between 2017302 and 2017336
group by c.grp_desc order by c.grp_desc;

--ID
select c.grp_desc
,count(distinct b.pos_trans_key) as IDtrans_dec
,sum(b.extended_sls_amt) as IDsales_dec
from acx_tlog_xref_dm a
inner join pos_mrchnds_dtl b ON a.pos_trans_key = b.pos_trans_key
inner join prod_sku_dm     c on c.sku_key = b.sku_key
where b.trans_type_key in (19,22,33) and
b.day_idnt between 2017302 and 2017336
group by c.grp_desc order by c.grp_desc;